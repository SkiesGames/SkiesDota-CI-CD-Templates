name: Reusable OpenCommit Workflow

on:
  workflow_call:
    inputs:
      github-token:
        description: 'GitHub token for authentication'
        required: false
        default: ${{ github.token }}
        type: string
      min-commit-length:
        description: 'Minimum commit message length to trigger improvement'
        required: false
        default: '15'
        type: string
      skip-if-already-good:
        description: 'Skip if commit message is already good'
        required: false
        default: 'true'
        type: string
      oco-model:
        description: 'AI model to use for commit messages'
        required: false
        default: 'deepseek-chat'
        type: string
      oco-ai-provider:
        description: 'AI provider to use'
        required: false
        default: 'deepseek'
        type: string
      oco-emoji:
        description: 'Enable emoji in commit messages'
        required: false
        default: 'true'
        type: string
      oco-tokens-max-input:
        description: 'Maximum input tokens'
        required: false
        default: '4096'
        type: string
      oco-tokens-max-output:
        description: 'Maximum output tokens'
        required: false
        default: '500'
        type: string
      oco-description:
        description: 'Include description in commit messages'
        required: false
        default: 'false'
        type: string
      oco-openai-base-path:
        description: 'OpenAI base path (leave empty for default)'
        required: false
        default: ''
        type: string
      oco-language:
        description: 'Language for commit messages'
        required: false
        default: 'en'
        type: string
      oco-prompt-module:
        description: 'Prompt module to use'
        required: false
        default: 'conventional-commit'
        type: string
      timeout-minutes:
        description: 'Timeout for the job in minutes'
        required: false
        default: '10'
        type: string
    secrets:
      oco-api-key:
        description: 'OpenCommit API key'
        required: true

jobs:
  opencommit:
    timeout-minutes: ${{ inputs.timeout-minutes }}
    name: OpenCommit
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Setup Node.js Environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ inputs.github-token }}
      
      - name: Check if commit needs improvement
        if: inputs.skip-if-already-good == 'true'
        id: check-commit
        run: |
          # Get the current commit message
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_LENGTH=${#COMMIT_MSG}
          MIN_LENGTH=${{ inputs.min-commit-length }}
          
          echo "Current commit message: $COMMIT_MSG"
          echo "Commit message length: $COMMIT_LENGTH"
          echo "Minimum length threshold: $MIN_LENGTH"
          
          # Check if commit message is already good enough
          if [ "$COMMIT_LENGTH" -ge "$MIN_LENGTH" ]; then
            echo "skip_improvement=true" >> $GITHUB_OUTPUT
          else
            echo "skip_improvement=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run OpenCommit
        if: inputs.skip-if-already-good == 'true' && steps.check-commit.outputs.skip_improvement == 'false'
        uses: di-sukharev/opencommit@github-action-v1.0.4
        with:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        env:
          # Use secret for API key
          OCO_API_KEY: ${{ secrets.oco-api-key }}
          
          # Customization options
          OCO_TOKENS_MAX_INPUT: ${{ inputs.oco-tokens-max-input }}
          OCO_TOKENS_MAX_OUTPUT: ${{ inputs.oco-tokens-max-output }}
          OCO_OPENAI_BASE_PATH: ${{ inputs.oco-openai-base-path }}
          OCO_DESCRIPTION: ${{ inputs.oco-description }}
          OCO_EMOJI: ${{ inputs.oco-emoji }}
          OCO_MODEL: ${{ inputs.oco-model }}
          OCO_AI_PROVIDER: ${{ inputs.oco-ai-provider }}
          OCO_LANGUAGE: ${{ inputs.oco-language }}
          OCO_PROMPT_MODULE: ${{ inputs.oco-prompt-module }}
      
      - name: Skip improvement (commit already good)
        if: inputs.skip-if-already-good == 'false' || steps.check-commit.outputs.skip_improvement == 'true'
        run: |
          echo "âœ… Skipping commit improvement - message is already good enough"