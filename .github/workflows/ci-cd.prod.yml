name: Main Production Pipeline

on:
  push:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      build:
        description: 'Build Docker images'
        required: false
        default: false
        type: boolean
      format-lint:
        description: 'Format and lint Ansible code'
        required: false
        default: true
        type: boolean
      test:
        description: 'Test Ansible code'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.detect.outputs.changed_files }}
      dockerfiles-matrix: ${{ steps.detect.outputs.dockerfiles-matrix }}
      ansible-is-changed: ${{ steps.detect.outputs.ansible-is-changed }}
      security-scan-needed: ${{ steps.detect.outputs.security_scan_needed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: detect
        run: |
          # Configuration
          DOCKERFILE_PATTERNS=("Dockerfile.prod" "Dockerfile.prod.test" "Dockerfile.prod.format-lint" "Dockerfile.prod.security-scan")
          ANSIBLE_PATTERN="ansible/"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "=== Workflow Dispatch Mode ==="
            CHANGED_FILES="ansible/**/* Dockerfile*"
          else
            echo "=== Automatic Change Detection Mode ==="
            echo "Event: ${{ github.event_name }}"
            echo "Before commit: ${{ github.event.before }}"
            echo "After commit: ${{ github.sha }}"
            
            # Get changed files with multiple fallback strategies
            CHANGED_FILES=""
            DETECTION_METHOD=""
            
            # Strategy 1: Try git diff with event commits
            if [ -n "${{ github.event.before }}" ] && [ -n "${{ github.sha }}" ]; then
              echo ""
              echo "Strategy 1: git diff with event commits"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
              if [ -n "$CHANGED_FILES" ]; then
                DETECTION_METHOD="Strategy 1 (event commits)"
                echo "✅ Success! Found files:"
                echo "$CHANGED_FILES" | sed 's/^/  - /'
              else
                echo "❌ No changes detected"
              fi
            fi
            
            # Strategy 2: If empty, try HEAD~1..HEAD (for single commits)
            if [ -z "$CHANGED_FILES" ]; then
              echo ""
              echo "Strategy 2: HEAD~1..HEAD comparison"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
              if [ -n "$CHANGED_FILES" ]; then
                DETECTION_METHOD="Strategy 2 (HEAD~1..HEAD)"
                echo "✅ Success! Found files:"
                echo "$CHANGED_FILES" | sed 's/^/  - /'
              else
                echo "❌ No changes detected"
              fi
            fi
            
            # Strategy 3: If still empty, show last commit changes
            if [ -z "$CHANGED_FILES" ]; then
              echo ""
              echo "Strategy 3: git show HEAD"
              CHANGED_FILES=$(git show --name-only --pretty="" HEAD 2>/dev/null || echo "")
              if [ -n "$CHANGED_FILES" ]; then
                DETECTION_METHOD="Strategy 3 (git show)"
                echo "✅ Success! Found files:"
                echo "$CHANGED_FILES" | sed 's/^/  - /'
              else
                echo "❌ No changes detected"
              fi
            fi
            
            # Strategy 4: If workflow was triggered by path filter but we found no files, 
            # use the path patterns that triggered it
            if [ -z "$CHANGED_FILES" ]; then
              echo ""
              echo "Strategy 4: Fallback to trigger paths"
              echo "⚠️  All git strategies failed, but workflow was triggered by path filter"
              echo "Assuming Dockerfile.prod changed"
              CHANGED_FILES="Dockerfile.prod"
              DETECTION_METHOD="Strategy 4 (fallback)"
            fi
            
            echo ""
            echo "=== Detection Result ==="
            echo "Method used: $DETECTION_METHOD"
          fi
          
          echo "All changed files: $CHANGED_FILES"
          
          # Detect Dockerfile changes
          echo ""
          echo "=== Dockerfile Detection ==="
          DOCKERFILES_CHANGED=""
          
          for pattern in "${DOCKERFILE_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^${pattern}$"; then
              echo "✅ Found: ${pattern}"
              DOCKERFILES_CHANGED="${DOCKERFILES_CHANGED:+$DOCKERFILES_CHANGED }$pattern"
            else
              echo "❌ Not found: ${pattern}"
            fi
          done
          
          # Detect Ansible changes
          ANSIBLE_IS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q "$ANSIBLE_PATTERN"; then
            ANSIBLE_IS_CHANGED="true"
          fi
          
          # Build matrix for Docker builds
          DOCKERFILES_MATRIX="[]"
          if [ -n "$DOCKERFILES_CHANGED" ]; then
            # Remove leading/trailing whitespace and ensure we have content
            DOCKERFILES_TRIMMED=$(echo "$DOCKERFILES_CHANGED" | xargs)
            if [ -n "$DOCKERFILES_TRIMMED" ]; then
              # Create JSON array more reliably using jq directly with compact output
              DOCKERFILES_MATRIX=$(jq -n -c --arg files "$DOCKERFILES_TRIMMED" '$files | split(" ") | map(select(length > 0))')
              # Validate JSON format
              if ! echo "$DOCKERFILES_MATRIX" | jq . >/dev/null 2>&1; then
                echo "Error: Invalid JSON generated for matrix"
                exit 1
              fi
            fi
          fi
          
          # Determine if security scan is needed
          SECURITY_SCAN_NEEDED="false"
          if [ -n "$CHANGED_FILES" ]; then
            SECURITY_SCAN_NEEDED="true"
          fi
          
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          printf "dockerfiles-matrix=%s\n" "$DOCKERFILES_MATRIX" >> $GITHUB_OUTPUT
          printf "ansible-is-changed=%s\n" "$ANSIBLE_IS_CHANGED" >> $GITHUB_OUTPUT
          printf "security_scan_needed=%s\n" "$SECURITY_SCAN_NEEDED" >> $GITHUB_OUTPUT
          
          echo ""
          echo "=== Final Outputs Summary ==="
          echo "Changed files: $CHANGED_FILES"
          echo "Dockerfiles changed: $DOCKERFILES_CHANGED"
          echo "Dockerfiles matrix: $DOCKERFILES_MATRIX"
          echo "Ansible is changed: $ANSIBLE_IS_CHANGED"
          echo "Security scan needed: $SECURITY_SCAN_NEEDED"
          echo ""
          echo "=== Job Triggers Preview ==="
          if [ "$DOCKERFILES_MATRIX" != "[]" ]; then
            echo "✅ Build job WILL run (dockerfiles-matrix is not empty)"
          else
            echo "⚠️  Build job might be skipped (dockerfiles-matrix is empty)"
          fi
          if [ "$ANSIBLE_IS_CHANGED" = "true" ]; then
            echo "✅ Ansible jobs (format-lint, test) WILL run"
          else
            echo "❌ Ansible jobs will be skipped"
          fi
          if [ "$SECURITY_SCAN_NEEDED" = "true" ]; then
            echo "✅ Security scan WILL run"
          else
            echo "❌ Security scan will be skipped"
          fi

  build:
    needs: [detect-changes]
    if: | 
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      ((needs.detect-changes.result == 'success' && needs.detect-changes.outputs.dockerfiles-matrix != '[]') || 
      needs.detect-changes.result == 'skipped' ||
      inputs.build)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.dockerfiles-matrix || '["Dockerfile.prod", "Dockerfile.prod.test", "Dockerfile.prod.format-lint"]') }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.dockerfile }}
        uses: ./.github/actions/build-image
        with:
          image-name: ${{ matrix.dockerfile == 'Dockerfile.prod' && 'ansible-prod' || matrix.dockerfile == 'Dockerfile.prod.test' && 'ansible-prod-test' || matrix.dockerfile == 'Dockerfile.prod.format-lint' && 'ansible-prod-format-lint' || 'ansible-prod-security-scan' }}
          dockerfile-path: ./${{ matrix.dockerfile }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
  security-scan-fast:
    needs: [detect-changes, build]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      needs.detect-changes.outputs.security-scan-needed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Only current commit for fast scan

      - name: Run Fast Security Scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: 'fast'
          target-files: ${{ needs.detect-changes.outputs.changed-files }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
  format-lint:
    needs: [detect-changes, build, security-scan-fast]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan-fast.result == 'success' || needs.security-scan-fast.result == 'skipped') &&
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      (inputs.format-lint ||
      (needs.detect-changes.result != 'skipped' && needs.detect-changes.outputs.ansible-is-changed == 'true') ||
      (needs.detect-changes.result != 'skipped' && needs.detect-changes.outputs.dockerfiles-matrix != '' && contains(fromJson(needs.detect-changes.outputs.dockerfiles-matrix), 'Dockerfile.prod.format-lint')))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run formatting and linting
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-format-lint:latest bash .github/scripts/ansible-prod-format-lint.sh

      - name: Commit formatting changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "Auto-format YAML files with Prettier"
            git push
          else
            echo "No formatting changes to commit"
          fi

  test:
    needs: [detect-changes, build, security-scan-fast, format-lint]
    if: |
      always() &&
      (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') &&
      (needs.security-scan-fast.result == 'success' || needs.security-scan-fast.result == 'skipped') &&
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      (inputs.test ||
      (needs.detect-changes.result != 'skipped' && needs.detect-changes.outputs.ansible-is-changed == 'true') ||
      (needs.detect-changes.result != 'skipped' && needs.detect-changes.outputs.dockerfiles-matrix != '' && contains(fromJson(needs.detect-changes.outputs.dockerfiles-matrix), 'Dockerfile.prod.test')))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-test:latest bash .github/scripts/ansible-prod-test.sh
