name: Main Production Pipeline

on:
  push:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile*'

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles_matrix: ${{ steps.detect.outputs.dockerfiles_matrix }}
      ansible_is_changed: ${{ steps.detect.outputs.ansible_is_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: detect
        run: |
          # Configuration
          DOCKERFILES_PATTERNS=("Dockerfile.ansible.prod" "Dockerfile.ansible.prod.test" "Dockerfile.ansible.prod.format-lint")
          ANSIBLE_REQUIREMENTS_PATTERN="ansible/requirements.yml"
          ANSIBLE_PATTERN="ansible/"
          
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
          
          # Detect Dockerfiles changes
          DOCKERFILES_CHANGED=""
          for pattern in "${DOCKERFILES_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^${pattern}$"; then
              DOCKERFILES_CHANGED="${DOCKERFILES_CHANGED:+$DOCKERFILES_CHANGED }$pattern"
            fi
          done
          
          # Detect requirements.yml changes to trigger Dockerfile.ansible.prod rebuild
          if echo "$CHANGED_FILES" | grep -q "$ANSIBLE_REQUIREMENTS_PATTERN"; then
            # Add Dockerfile.ansible.prod to DOCKERFILES_CHANGED to trigger rebuild (only if not already present)
            if ! echo "$DOCKERFILES_CHANGED" | grep -q "Dockerfile.ansible.prod"; then
              DOCKERFILES_CHANGED="${DOCKERFILES_CHANGED:+$DOCKERFILES_CHANGED }Dockerfile.ansible.prod"
            fi
          fi
          
          # Detect Ansible changes
          ANSIBLE_IS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q "$ANSIBLE_PATTERN"; then
            ANSIBLE_IS_CHANGED="true"
          fi
          
          # Build matrix for Docker builds
          DOCKERFILES_MATRIX="[]"
          if [ -n "$DOCKERFILES_CHANGED" ]; then
            DOCKERFILES_TRIMMED=$(echo "$DOCKERFILES_CHANGED" | xargs)
            if [ -n "$DOCKERFILES_TRIMMED" ]; then
              DOCKERFILES_MATRIX=$(jq -n -c --arg files "$DOCKERFILES_TRIMMED" '$files | split(" ") | map(select(length > 0))')
              if ! echo "$DOCKERFILES_MATRIX" | jq . >/dev/null 2>&1; then
                echo "Error: Invalid JSON generated for matrix"
                exit 1
              fi
            fi
          fi
          
          # Set outputs
          printf "dockerfiles_matrix=%s\n" "$DOCKERFILES_MATRIX" >> $GITHUB_OUTPUT
          printf "ansible_is_changed=%s\n" "$ANSIBLE_IS_CHANGED" >> $GITHUB_OUTPUT
          
          # Summary
          echo "Changed files: $CHANGED_FILES"
          echo "Dockerfiles changed: $DOCKERFILES_CHANGED"
          echo "Dockerfiles matrix: $DOCKERFILES_MATRIX"
          echo "Ansible is changed: $ANSIBLE_IS_CHANGED"
  
  build:
    needs: [detect-changes]
    if: | 
      always() &&
      needs.detect-changes.result == 'success' &&
      needs.detect-changes.outputs.dockerfiles_matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.dockerfiles_matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.dockerfile }}
        uses: ./.github/actions/build-image
        with:
          image-name: ${{ matrix.dockerfile == 'Dockerfile.ansible.prod' && 'ansible-prod' || matrix.dockerfile == 'Dockerfile.ansible.prod.test' && 'ansible-prod-test' || matrix.dockerfile == 'Dockerfile.ansible.prod.format-lint' && 'ansible-prod-format-lint' }}
          dockerfile-path: ./${{ matrix.dockerfile }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
  format-lint:
    needs: [detect-changes, build]
    if: |
      always() &&
      needs.detect-changes.result == 'success' && 
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      needs.detect-changes.outputs.ansible_is_changed == 'true' ||
      needs.detect-changes.outputs.dockerfiles_matrix != '' && contains(fromJson(needs.detect-changes.outputs.dockerfiles_matrix), 'Dockerfile.ansible.prod.format-lint')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run formatting and linting
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-format-lint:latest bash .github/scripts/ansible-prod-format-lint.sh

      - name: Commit formatting changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # Only add YAML files that were formatted
          git add ansible/**/*.yml ansible/**/*.yaml || true
          if ! git diff --staged --quiet; then
            git commit -m "Auto-format YAML files with Prettier"
            git push
          else
            echo "No formatting changes to commit"
          fi

  test:
    needs: [detect-changes, build, format-lint]
    if: |
      always() &&
      needs.detect-changes.result == 'success' &&
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      (needs.format-lint.result == 'success' || needs.format-lint.result == 'skipped') &&
      needs.detect-changes.outputs.ansible_is_changed == 'true' ||
      needs.detect-changes.outputs.dockerfiles_matrix != '' && contains(fromJson(needs.detect-changes.outputs.dockerfiles_matrix), 'Dockerfile.ansible.prod.test')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-test:latest bash .github/scripts/ansible-prod-test.sh
