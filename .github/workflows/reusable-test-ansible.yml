name: Reusable Test Ansible Workflow

on:
  workflow_call:
    inputs:
      wait-for-build:
        description: 'Whether to wait for build-images workflow to complete'
        required: false
        type: boolean
        default: true
      build-workflow-name:
        description: 'Name of the build workflow to wait for'
        required: false
        type: string
        default: 'Build Docker Images'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-build-status:
    if: ${{ inputs.wait-for-build }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
    outputs:
      build-running: ${{ steps.check.outputs.build-running }}
    steps:
      - name: Check if build workflow is running
        id: check
        run: |
          # Check if build workflow is currently running
          RUNNING_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "${{ inputs.build-workflow-name }}" and .status == "in_progress") | .id')
          
          if [ -n "$RUNNING_WORKFLOWS" ]; then
            echo "build-running=true" >> $GITHUB_OUTPUT
            echo "Build workflow is running, will wait for it to complete"
          else
            echo "build-running=false" >> $GITHUB_OUTPUT
            echo "Build workflow is not running, proceeding immediately"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-build:
    if: ${{ inputs.wait-for-build && needs.check-build-status.outputs.build-running == 'true' }}
    runs-on: ubuntu-latest
    needs: [check-build-status]
    permissions:
      actions: read
    steps:
      - name: Wait for build workflow to complete
        run: |
          echo "Waiting for build workflow to complete..."
          
          # Wait for build workflow to complete
          while true; do
            RUNNING_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "${{ inputs.build-workflow-name }}" and .status == "in_progress") | .id')
            
            if [ -z "$RUNNING_WORKFLOWS" ]; then
              echo "Build workflow completed, proceeding with tests"
              break
            fi
            
            echo "Build workflow still running, waiting 30 seconds..."
            sleep 30
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-ansible-syntax:
    runs-on: ubuntu-latest
    needs: [check-build-status, wait-for-build]
    if: ${{ !inputs.wait-for-build || needs.check-build-status.outputs.build-running == 'false' || needs.wait-for-build.result == 'success' || needs.wait-for-build.result == 'skipped' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo-name
        run: echo "repo-name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Test Ansible syntax for roles
        run: |
          for role in ansible/roles/*/; do
            echo "CHECKING ROLE: $role"
            python -m ansiblelint "$role" --nocolor
          done
        container: ghcr.io/${{ steps.repo-name.outputs.repo-name }}/ansible-test:latest

      - name: Test Ansible syntax for playbooks
        run: |
          for playbook in ansible/playbooks/*.yml; do
            echo "CHECKING PLAYBOOK: $playbook"
            python -m ansiblelint "$playbook" --nocolor
          done
        container: ghcr.io/${{ steps.repo-name.outputs.repo-name }}/ansible-test:latest

  test-playbooks:
    runs-on: ubuntu-latest
    needs: [test-ansible-syntax]
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo-name
        run: echo "repo-name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Test playbooks with dry-run
        run: |
          for playbook in ansible/playbooks/*.yml; do
            echo "CHECKING PLAYBOOK: $playbook"
            python -m ansible.playbook "$playbook" --check --diff -i localhost
          done
        container: ghcr.io/${{ steps.repo-name.outputs.repo-name }}/ansible-test:latest 