name: Test Ansible Code

on:
  push:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile.test'
  pull_request:
    paths:
      - 'ansible/**/*'
  workflow_dispatch:
    inputs:
      skip_dependency_check:
        description: 'Skip dependency workflow checks'
        required: false
        default: false
        type: boolean

permissions:
  actions: read
  contents: read
  packages: read

jobs:
  check-dockerfile-changes:
    runs-on: ubuntu-latest
    outputs:
      dockerfile-changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if Dockerfile.test changed
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            # Check if Dockerfile.test was modified in this push/PR
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "Dockerfile.test"; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

  wait-for-build:
    if: needs.check-dockerfile-changes.outputs.dockerfile-changed == 'true'
    runs-on: ubuntu-latest
    needs: [check-dockerfile-changes]
    outputs:
      build-success: ${{ steps.wait.outputs.success }}
    permissions:
      actions: read
    steps:
      - name: Wait for build workflow to complete
        id: wait
        run: |
          echo "Dockerfile.test changed, waiting for build workflow to complete..."
          
          # Wait for build workflow to complete
          while true; do
            RUNNING_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Build Docker Images" and .status == "in_progress") | .id')
            
            if [ -z "$RUNNING_WORKFLOWS" ]; then
              echo "Build workflow completed, checking result..."
              break
            fi
            
            echo "Build workflow still running, waiting 30 seconds..."
            sleep 30
          done
          
          # Check final result of build workflow
          BUILD_RESULT=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Build Docker Images" and .status == "completed") | .conclusion' | head -1)
          
          if [ "$BUILD_RESULT" = "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Build workflow completed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Build workflow failed or was cancelled"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-dependencies:
    runs-on: ubuntu-latest
    needs: [check-dockerfile-changes, wait-for-build]
    outputs:
      lint-running: ${{ steps.check-lint.outputs.running }}
      lint-success: ${{ steps.check-lint.outputs.success }}
    steps:
      - name: Check if lint workflow is running
        id: check-lint
        run: |
          # Check if Lint Ansible Code workflow is currently running for this commit
          RUNNING_LINT=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Lint Ansible Code" and .head_sha == "'${{ github.sha }}'" and .status == "in_progress") | .id' | head -1)
          
          if [ -n "$RUNNING_LINT" ]; then
            echo "running=true" >> $GITHUB_OUTPUT
            echo "Lint workflow is running, will wait for it"
          else
            echo "running=false" >> $GITHUB_OUTPUT
            echo "No lint workflow running, proceeding"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-dependencies:
    runs-on: ubuntu-latest
    needs: [check-dependencies]
    if: needs.check-dependencies.outputs.lint-running == 'true'
    outputs:
      lint-success: ${{ steps.wait-lint.outputs.success }}
    steps:
      - name: Wait for lint workflow if running
        id: wait-lint
        run: |
          echo "Waiting for lint workflow to complete..."
          
          while true; do
            RUNNING_LINT=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Lint Ansible Code" and .head_sha == "'${{ github.sha }}'" and .status == "in_progress") | .id' | head -1)
            
            if [ -z "$RUNNING_LINT" ]; then
              echo "Lint workflow completed"
              break
            fi
            
            echo "Lint workflow still running, waiting 30 seconds..."
            sleep 30
          done
          
          # Check final result
          LINT_RESULT=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Lint Ansible Code" and .head_sha == "'${{ github.sha }}'" and .status == "completed") | .conclusion' | head -1)
          
          if [ "$LINT_RESULT" = "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Lint workflow completed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Lint workflow failed or was cancelled"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-ansible-syntax:
    runs-on: ubuntu-latest
    needs: [check-dockerfile-changes, wait-for-build, check-dependencies, wait-for-dependencies]
    if: |
      always() && 
      (needs.check-dockerfile-changes.outputs.dockerfile-changed == 'false' || needs.wait-for-build.outputs.build-success == 'true' || needs.wait-for-build.result == 'skipped') &&
      (needs.check-dependencies.outputs.lint-running == 'false' || needs.wait-for-dependencies.outputs.lint-success == 'true' || needs.wait-for-dependencies.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Try to pull custom image
        id: pull-image
        run: |
          if docker pull ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-test:latest; then
            echo "custom-image-available=true" >> $GITHUB_OUTPUT
            echo "Successfully pulled custom image"
          else
            echo "custom-image-available=false" >> $GITHUB_OUTPUT
            echo "Failed to pull custom image, will use fallback"
          fi

      - name: Test Ansible syntax for roles (Custom Image)
        if: steps.pull-image.outputs.custom-image-available == 'true'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-test:latest bash -c "
            ansible-galaxy collection install ansible.posix
            for role in ansible/roles/*/; do
              echo \"CHECKING ROLE: \$role\"
              python -m ansiblelint \"\$role\" --nocolor
            done
          "

      - name: Test Ansible syntax for roles (Fallback)
        if: steps.pull-image.outputs.custom-image-available == 'false'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace python:3.13-slim bash -c "
            pip install --no-cache-dir ansible ansible-lint
            ansible-galaxy collection install ansible.posix
            for role in ansible/roles/*/; do
              echo \"CHECKING ROLE: \$role\"
              python -m ansiblelint \"\$role\" --nocolor
            done
          "

      - name: Test Ansible syntax for playbooks (Custom Image)
        if: steps.pull-image.outputs.custom-image-available == 'true'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-test:latest bash -c "
            ansible-galaxy collection install ansible.posix
            for playbook in ansible/playbooks/*.yml; do
              echo \"CHECKING PLAYBOOK: \$playbook\"
              python -m ansiblelint \"\$playbook\" --nocolor
            done
          "

      - name: Test Ansible syntax for playbooks (Fallback)
        if: steps.pull-image.outputs.custom-image-available == 'false'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace python:3.13-slim bash -c "
            pip install --no-cache-dir ansible ansible-lint
            ansible-galaxy collection install ansible.posix
            for playbook in ansible/playbooks/*.yml; do
              echo \"CHECKING PLAYBOOK: \$playbook\"
              python -m ansiblelint \"\$playbook\" --nocolor
            done
          "

  test-playbooks:
    runs-on: ubuntu-latest
    needs: [test-ansible-syntax]
    if: needs.test-ansible-syntax.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Try to pull custom image
        id: pull-image
        run: |
          if docker pull ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-test:latest; then
            echo "custom-image-available=true" >> $GITHUB_OUTPUT
            echo "Successfully pulled custom image"
          else
            echo "custom-image-available=false" >> $GITHUB_OUTPUT
            echo "Failed to pull custom image, will use fallback"
          fi

      - name: Test playbooks with dry-run (Custom Image)
        if: steps.pull-image.outputs.custom-image-available == 'true'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-test:latest bash -c "
            ansible-galaxy collection install ansible.posix
            for playbook in ansible/playbooks/*.yml; do
              echo \"CHECKING PLAYBOOK: \$playbook\"
              ansible-playbook \"\$playbook\" --check --diff -i localhost,
            done
          "

      - name: Test playbooks with dry-run (Fallback)
        if: steps.pull-image.outputs.custom-image-available == 'false'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace python:3.13-slim bash -c "
            pip install --no-cache-dir ansible ansible-lint
            ansible-galaxy collection install ansible.posix
            for playbook in ansible/playbooks/*.yml; do
              echo \"CHECKING PLAYBOOK: \$playbook\"
              ansible-playbook \"\$playbook\" --check --diff -i localhost,
            done
          " 