name: Test Ansible Code

on:
  push:
    paths:
      - 'ansible/**/*'
      - 'Dockerfile.test'
  pull_request:
    paths:
      - 'ansible/**/*'
  workflow_dispatch:

permissions:
  actions: read

jobs:
  check-dockerfile-changes:
    runs-on: ubuntu-latest
    outputs:
      dockerfile-changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Check if Dockerfile.test changed
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            # Check if Dockerfile.test was modified in this push/PR
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "Dockerfile.test"; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

  wait-for-build:
    if: needs.check-dockerfile-changes.outputs.dockerfile-changed == 'true'
    runs-on: ubuntu-latest
    needs: [check-dockerfile-changes]
    permissions:
      actions: read
    steps:
      - name: Wait for build workflow to complete
        run: |
          echo "Dockerfile.test changed, waiting for build workflow to complete..."
          
          # Wait for build workflow to complete
          while true; do
            RUNNING_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name == "Build Docker Images" and .status == "in_progress") | .id')
            
            if [ -z "$RUNNING_WORKFLOWS" ]; then
              echo "Build workflow completed, proceeding with tests"
              break
            fi
            
            echo "Build workflow still running, waiting 30 seconds..."
            sleep 30
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-ansible-syntax:
    runs-on: ubuntu-latest
    needs: [check-dockerfile-changes, wait-for-build]
    if: always() && (needs.check-dockerfile-changes.outputs.dockerfile-changed == 'false' || needs.wait-for-build.result == 'success' || needs.wait-for-build.result == 'skipped')
    strategy:
      matrix:
        container: [custom, fallback]
    container:
      image: ${{ matrix.container == 'custom' && 'ghcr.io/skiesgames/skiesdotagitlab-ci-templates/ansible-test:latest' || 'python:3.13-slim' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible (fallback only)
        if: matrix.container == 'fallback'
        run: |
          pip install --no-cache-dir ansible-lint

      - name: Test Ansible syntax for roles
        run: |
          for role in ansible/roles/*/; do
            echo "CHECKING ROLE: $role"
            python -m ansiblelint "$role" --nocolor
          done

      - name: Test Ansible syntax for playbooks
        run: |
          for playbook in ansible/playbooks/*.yml; do
            echo "CHECKING PLAYBOOK: $playbook"
            python -m ansiblelint "$playbook" --nocolor
          done

  test-playbooks:
    runs-on: ubuntu-latest
    needs: [test-ansible-syntax]
    if: always()
    strategy:
      matrix:
        container: [custom, fallback]
    container:
      image: ${{ matrix.container == 'custom' && 'ghcr.io/skiesgames/skiesdotagitlab-ci-templates/ansible-test:latest' || 'python:3.13-slim' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible (fallback only)
        if: matrix.container == 'fallback'
        run: |
          pip install --no-cache-dir ansible

      - name: Test playbooks with dry-run
        run: |
          for playbook in ansible/playbooks/*.yml; do
            echo "CHECKING PLAYBOOK: $playbook"
            ansible-playbook "$playbook" --check --diff -i localhost,
          done 