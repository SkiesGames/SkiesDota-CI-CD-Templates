name: 'Security Scan'
description: 'Run TruffleHog security scan with configurable options'

inputs:
  scan-type:
    description: 'Type of scan (fast or comprehensive)'
    required: true
    default: 'fast'
  target-files:
    description: 'Files to scan (for fast scan)'
    required: false
    default: ''
  scan-commits:
    description: 'Scan git history (for comprehensive scan)'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for registry access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Docker
      uses: ./.github/actions/setup-docker
      with:
        github-token: ${{ inputs.github-token }}

    - name: Try to pull custom security scan image
      uses: ./.github/actions/pull-image
      with:
        image-name: ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-security-scan:latest
        output-name: custom-image-available

    - name: Run Security Scan (Custom Image)
      if: steps.pull-image.outputs.custom-image-available == 'true'
      shell: bash
      run: |
        # Build base scan command
        SCAN_CMD="trufflehog --only-verified --fail --no-update"
        SCAN_CMD="$SCAN_CMD --exclude-paths .git,node_modules,__pycache__,.venv,venv,.pytest_cache,.coverage,dist,build,.tox,.mypy_cache"
        SCAN_CMD="$SCAN_CMD --entropy-threshold 4.5"
        SCAN_CMD="$SCAN_CMD --regex-patterns 'api[_-]?key|secret|password|token|credential|aws[_-]?access[_-]?key|aws[_-]?secret[_-]?key|private[_-]?key|ssh[_-]?key|database[_-]?url|connection[_-]?string'"
        
        if [ "${{ inputs.scan-type }}" = "comprehensive" ]; then
          echo "üîç Running comprehensive security scan..."
          if [ "${{ inputs.scan-commits }}" = "true" ]; then
            echo "üìú Including git history scan..."
            SCAN_CMD="$SCAN_CMD --scan-commits"
          fi
          echo "Running: docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-security-scan:latest bash -c \"$SCAN_CMD .\""
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-security-scan:latest \
            bash -c "$SCAN_CMD ."
        else
          echo "‚ö° Running fast security scan..."
          TARGET_FILES="${{ inputs.target-files }}"
          if [ -n "$TARGET_FILES" ]; then
            echo "Scanning changed files: $TARGET_FILES"
            echo "$TARGET_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                echo "Scanning file: $file"
                docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/skiesgames/skiesdota-ci-cd-templates/ansible-prod-security-scan:latest \
                  trufflehog \
                    --only-verified \
                    --fail \
                    --no-update \
                    --entropy-threshold 4.5 \
                    --regex-patterns 'api[_-]?key|secret|password|token|credential|aws[_-]?access[_-]?key|aws[_-]?secret[_-]?key|private[_-]?key|ssh[_-]?key|database[_-]?url|connection[_-]?string' \
                    "$file"
              fi
            done
          else
            echo "No files to scan"
          fi
        fi
        
        echo "‚úÖ Security scan completed successfully!"

    - name: Run Security Scan (Fallback)
      if: steps.pull-image.outputs.custom-image-available == 'false'
      shell: bash
      run: |
        # Install TruffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        # Build base scan command
        SCAN_CMD="trufflehog --only-verified --fail --no-update"
        SCAN_CMD="$SCAN_CMD --exclude-paths .git,node_modules,__pycache__,.venv,venv,.pytest_cache,.coverage,dist,build,.tox,.mypy_cache"
        SCAN_CMD="$SCAN_CMD --entropy-threshold 4.5"
        SCAN_CMD="$SCAN_CMD --regex-patterns 'api[_-]?key|secret|password|token|credential|aws[_-]?access[_-]?key|aws[_-]?secret[_-]?key|private[_-]?key|ssh[_-]?key|database[_-]?url|connection[_-]?string'"
        
        if [ "${{ inputs.scan-type }}" = "comprehensive" ]; then
          echo "üîç Running comprehensive security scan..."
          if [ "${{ inputs.scan-commits }}" = "true" ]; then
            echo "üìú Including git history scan..."
            SCAN_CMD="$SCAN_CMD --scan-commits"
          fi
          echo "Running: $SCAN_CMD ."
          eval "$SCAN_CMD ."
        else
          echo "‚ö° Running fast security scan..."
          TARGET_FILES="${{ inputs.target-files }}"
          if [ -n "$TARGET_FILES" ]; then
            echo "Scanning changed files: $TARGET_FILES"
            echo "$TARGET_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                echo "Scanning file: $file"
                trufflehog \
                  --only-verified \
                  --fail \
                  --no-update \
                  --entropy-threshold 4.5 \
                  --regex-patterns 'api[_-]?key|secret|password|token|credential|aws[_-]?access[_-]?key|aws[_-]?secret[_-]?key|private[_-]?key|ssh[_-]?key|database[_-]?url|connection[_-]?string' \
                  "$file"
              fi
            done
          else
            echo "No files to scan"
          fi
        fi
        
        echo "‚úÖ Security scan completed successfully!"
